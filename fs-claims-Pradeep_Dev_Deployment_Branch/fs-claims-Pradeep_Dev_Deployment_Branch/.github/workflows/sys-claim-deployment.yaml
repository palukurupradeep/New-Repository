name: Sys Claim Deployment Pipeline

on:
  push:
    branches:
      - SYS_Deployment_Branch

env:
  NAMESPACE: sys

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run linters
      run: echo "Running linters..."  # TODO: Add specific linting commands

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    # TODO: Uncomment and configure test step
    # - name: Run tests
    #   run: ./gradlew test

  build:
    needs: [lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: claim-initiation-service
            dockerfile: claim-initiation-service/Dockerfile
            context: claim-initiation-service/
          - name: claim-integration-service
            dockerfile: claim-integration-service/Dockerfile
            context: claim-integration-service/
          - name: claim-security-service
            dockerfile: claim-security-service/Dockerfile
            context: claim-security-service/
          - name: claim-ui-service
            dockerfile: claim-ui/Dockerfile
            context: claim-ui/
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to JFrog
      uses: docker/login-action@v2
      with:
        registry: ${{ vars.JF_HOST }}
        username: ${{ secrets.JF_USER }}
        password: ${{ secrets.JF_PASSWORD }}
    
    - name: Login to JFrog
      uses: docker/login-action@v2
      with:
        registry: ${{ vars.JF_HOST }}
        username: ${{ secrets.JF_USER }}
        password: ${{ secrets.JF_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.dockerfile }}
        push: true
        tags: |
          ${{ vars.JF_HOST }}/financialservices-docker-local/${{ matrix.service.name }}:${{ github.sha }}
          ${{ vars.JF_HOST }}/financialservices-docker-local/${{ matrix.service.name }}:latest
        cache-from: type=registry,ref=${{ vars.JF_HOST }}/financialservices-docker-local/${{ matrix.service.name }}:buildcache
        cache-to: type=registry,ref=${{ vars.JF_HOST }}/financialservices-docker-local/${{ matrix.service.name }}:buildcache,mode=max

  deploy:
    needs: build
    runs-on: [self-hosted, linux]
    steps:
    - uses: actions/checkout@v3
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.25.0'
    - uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: 'v0.0.24'
    - name: Get AKS Credentials
      run: |
        az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing
        kubelogin convert-kubeconfig -l azurecli
    
    - name: Verify JFrog secret
      run: |
        verify_or_create_secret() {
          local secret_name=$1
          local namespace=$2
          if kubectl get secret "${secret_name}" -n "${namespace}" &> /dev/null; then
            echo "Secret '${secret_name}' exists in namespace ${namespace}"
            echo "Verifying secret content:"
            kubectl get secret "${secret_name}" -n "${namespace}" -o jsonpath='{.data.\.dockerconfigjson}' | base64 --decode
          else
            echo "Secret '${secret_name}' not found in namespace ${namespace}"
            kubectl create secret docker-registry "${secret_name}" \
              --docker-server=${{ vars.JF_HOST }} \
              --docker-username=${{ secrets.JF_USER }} \
              --docker-password=${{ secrets.JF_PASSWORD }} \
              --namespace="${namespace}" \
              --dry-run=client -o yaml | kubectl apply -f -
            echo "Created secret '${secret_name}' in namespace ${namespace}"
          fi
        }

        verify_or_create_secret "jfrog-registry-secret" "${{ env.NAMESPACE }}"

    - name: Deploy services
      run: |
        check_sed() {
          sed "$@"
          if [ $? -ne 0 ]; then
            echo "Error: sed command failed for $1"
            exit 1
          fi
        }

        apply_k8s_resources() {
          local service=$1
          echo "Applying deployment for ${service}-${NAMESPACE}-service"
          kubectl apply -f k8s/storybook/${service}-service/deployment.yaml \
                        -f k8s/storybook/${service}-service/ingress.yaml \
                        -f k8s/storybook/${service}-service/service.yaml \
                        -n ${{ env.NAMESPACE }}
        }

        scale_service() {
          local service=$1
          local replicas=$2
          echo "Scaling ${service}-${NAMESPACE}-service to ${replicas} replicas"
          kubectl scale deployment/${service}-${NAMESPACE}-service-deployment --replicas=${replicas} -n ${{ env.NAMESPACE }}
        }

        services=("claim-initiation" "claim-integration" "claim-security" "claim-ui")
        for service in "${services[@]}"; do
          echo "Processing service: ${service}"

          check_sed -i'' \
            -e "s|${service}|${service}-${NAMESPACE}|" \
            -e "s|image: .*|image: ${{ vars.JF_HOST }}/financialservices-docker-local/${service}-service:${{ github.sha }}|" \
            -e "s|namespace: claim-apps|namespace: ${NAMESPACE}|" \
            k8s/storybook/${service}-service/deployment.yaml

          check_sed -i'' \
            -e "s|${service}|${service}-${NAMESPACE}|" \
            -e "s|namespace: claim-apps|namespace: ${NAMESPACE}|" \
            -e "s|fs-claims-dev|fs-claims-${NAMESPACE}|" \
            k8s/storybook/${service}-service/ingress.yaml

          check_sed -i'' \
            -e "s|${service}-service|${service}-${NAMESPACE}-service|" \
            -e "s|namespace: claim-apps|namespace: ${NAMESPACE}|" \
            k8s/storybook/${service}-service/service.yaml

          apply_k8s_resources "${service}"
          scale_service "${service}" 0
          scale_service "${service}" 1
        done
    # TODO: Implement canary deployment and notifications
